// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieDataBase.Data;

#nullable disable

namespace MovieDataBase.Migrations
{
    [DbContext(typeof(MovieDataBaseContext))]
    [Migration("20251027202725_SeedInitialDataAgain")]
    partial class SeedInitialDataAgain
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieDataBase.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Fast-paced, high energy films.",
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Emotion-driven storytelling.",
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Humorous and light-hearted films.",
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Futuristic and science-based stories.",
                            Name = "Sci-Fi"
                        });
                });

            modelBuilder.Entity("MovieDataBase.Models.MovieGenres", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenres");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            GenreId = 1
                        },
                        new
                        {
                            MovieId = 2,
                            GenreId = 2
                        },
                        new
                        {
                            MovieId = 3,
                            GenreId = 3
                        },
                        new
                        {
                            MovieId = 4,
                            GenreId = 4
                        },
                        new
                        {
                            MovieId = 5,
                            GenreId = 2
                        });
                });

            modelBuilder.Entity("MovieDataBase.Models.MovieImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("imageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieImages");
                });

            modelBuilder.Entity("MovieDataBase.Models.Movies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CritiqueScore")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DateReleased")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Runtime")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentRating = "PG-13",
                            CritiqueScore = 78,
                            DateReleased = new DateOnly(2020, 5, 1),
                            Description = "High-octane action thriller.",
                            Director = "A. Silva",
                            Runtime = 118,
                            Title = "Edge of Dawn"
                        },
                        new
                        {
                            Id = 2,
                            ContentRating = "R",
                            CritiqueScore = 84,
                            DateReleased = new DateOnly(2019, 10, 12),
                            Description = "Emotional drama about family and loss.",
                            Director = "M. Costa",
                            Runtime = 105,
                            Title = "Silent River"
                        },
                        new
                        {
                            Id = 3,
                            ContentRating = "PG",
                            CritiqueScore = 70,
                            DateReleased = new DateOnly(2021, 3, 20),
                            Description = "Light-hearted comedy for all ages.",
                            Director = "R. Pereira",
                            Runtime = 95,
                            Title = "Laugh Riot"
                        },
                        new
                        {
                            Id = 4,
                            ContentRating = "PG-13",
                            CritiqueScore = 88,
                            DateReleased = new DateOnly(2022, 8, 5),
                            Description = "Visually stunning sci-fi adventure.",
                            Director = "L. Fernandes",
                            Runtime = 132,
                            Title = "Neon Galaxy"
                        },
                        new
                        {
                            Id = 5,
                            ContentRating = "PG-13",
                            CritiqueScore = 76,
                            DateReleased = new DateOnly(2018, 11, 2),
                            Description = "Drama with surprising twists.",
                            Director = "S. Almeida",
                            Runtime = 110,
                            Title = "Crossroads"
                        });
                });

            modelBuilder.Entity("MovieDataBase.Models.People", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("datetime2");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("MovieDataBase.Models.PeopleRolesInMovies", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("PeopleId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "PeopleId", "RoleId");

                    b.HasIndex("PeopleId");

                    b.HasIndex("RoleId");

                    b.ToTable("PeopleRolesInMovies");
                });

            modelBuilder.Entity("MovieDataBase.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("MovieDataBase.Models.MovieGenres", b =>
                {
                    b.HasOne("MovieDataBase.Models.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDataBase.Models.Movies", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieDataBase.Models.MovieImages", b =>
                {
                    b.HasOne("MovieDataBase.Models.Movies", "Movie")
                        .WithMany("Images")
                        .HasForeignKey("MovieId");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieDataBase.Models.PeopleRolesInMovies", b =>
                {
                    b.HasOne("MovieDataBase.Models.Movies", "Movie")
                        .WithMany("PeopleRoles")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDataBase.Models.People", "People")
                        .WithMany("MovieRoles")
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieDataBase.Models.Role", "Role")
                        .WithMany("PeopleInMovies")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("People");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MovieDataBase.Models.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("MovieDataBase.Models.Movies", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("MovieGenres");

                    b.Navigation("PeopleRoles");
                });

            modelBuilder.Entity("MovieDataBase.Models.People", b =>
                {
                    b.Navigation("MovieRoles");
                });

            modelBuilder.Entity("MovieDataBase.Models.Role", b =>
                {
                    b.Navigation("PeopleInMovies");
                });
#pragma warning restore 612, 618
        }
    }
}
